name: Heal - Create Issue and Trigger Copilot

on:
  workflow_dispatch:
    inputs:
      failure-type:
        description: 'Type of failure detected'
        required: true
        type: string
      failure-category:
        description: 'Category of failure (build, deployment, runtime, infrastructure, unknown)'
        required: true
        type: choice
        options:
          - build
          - deployment
          - runtime
          - infrastructure
          - unknown

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  create-healing-issue:
    runs-on: ubuntu-latest
    
    outputs:
      issue-number: ${{ steps.create-issue.outputs.number }}
      issue-url: ${{ steps.create-issue.outputs.url }}
      issue-node-id: ${{ steps.create-issue.outputs.node-id }}
    
    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4

      - name: üîê Fetch latest workflow run logs
        id: fetch-logs
        continue-on-error: true
        run: |
          # Determine which workflow to check based on failure category
          if [ "${{ github.event.inputs.failure-category }}" == "build" ]; then
            WORKFLOW="ci.yaml"
          elif [ "${{ github.event.inputs.failure-category }}" == "deployment" ]; then
            WORKFLOW="cd.yaml"
          else
            WORKFLOW="monitor.yaml"
          fi
          
          echo "Fetching logs from workflow: $WORKFLOW"
          
          # Get the latest failed run
          LATEST_RUN=$(gh run list \
            --workflow "$WORKFLOW" \
            --limit 1 \
            --json databaseId,conclusion \
            --repo ${{ github.repository }} | jq '.[0]')
          
          RUN_ID=$(echo "$LATEST_RUN" | jq -r '.databaseId')
          
          if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
            echo "Latest run ID: $RUN_ID"
            
            # Get the logs
            gh run view "$RUN_ID" --log --repo ${{ github.repository }} > workflow-logs.txt 2>&1 || true
            
            # Extract the last 50 lines of logs
            LOGS=$(tail -50 workflow-logs.txt | head -c 3000 || echo "Could not retrieve logs")
            
            # Write logs to output
            echo "logs<<EOF" >> $GITHUB_OUTPUT
            echo "$LOGS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "logs=No recent workflow runs found" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: üìã Create GitHub Issue
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            const failureType = '${{ github.event.inputs.failure-type }}';
            const failureCategory = '${{ github.event.inputs.failure-category }}';
            const timestamp = new Date().toISOString();
            
            // Map failure categories to labels and priority
            const categoryMap = {
              'build': { label: 'ci-failure', priority: 'high', title: 'CI Pipeline Failure' },
              'deployment': { label: 'cd-failure', priority: 'high', title: 'CD Pipeline Failure' },
              'runtime': { label: 'runtime-error', priority: 'medium', title: 'Runtime Error' },
              'infrastructure': { label: 'infra-issue', priority: 'high', title: 'Infrastructure Issue' },
              'unknown': { label: 'unknown-failure', priority: 'low', title: 'Unknown Failure' }
            };
            
            const category = categoryMap[failureCategory] || categoryMap['unknown'];
            
            const issueBody = `## üî¥ Self-Healing Issue Report
            
            **Detected At:** ${timestamp}
            **Failure Type:** ${failureType}
            **Failure Category:** ${failureCategory}
            **Priority:** ${category.priority.toUpperCase()}
            
            ### Description
            An automated failure has been detected in the self-healing pipeline. This issue has been automatically created and assigned to GitHub Copilot Coding Agent for remediation.
            
            ### Failure Details
            \`\`\`
            ${failureType}
            \`\`\`
            
            ### Workflow Logs
            \`\`\`
            ${{ steps.fetch-logs.outputs.logs }}
            \`\`\`
            
            ### Required Actions
            
            Please:
            1. Analyze the failure logs above
            2. Identify the root cause
            3. Create a fix on a new branch
            4. Open a pull request with the remediation
            
            ### Monitoring Context
            - **Repository:** ${context.repo.owner}/${context.repo.repo}
            - **Branch:** ${context.ref}
            - **Workflow Run:** [View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - **Timestamp:** ${timestamp}
            
            *This issue was automatically created by the self-healing pipeline monitor.*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîß [Self-Healing] ${category.title}`,
              body: issueBody,
              labels: [category.label, 'self-healing', 'automated', category.priority]
            });
            
            core.setOutput('number', issue.data.number);
            core.setOutput('url', issue.data.html_url);
            core.setOutput('node-id', issue.data.node_id);
            
            console.log(`‚úÖ Issue #${issue.data.number} created: ${issue.data.html_url}`);
            console.log(`Node ID: ${issue.data.node_id}`);
            
            return issue.data.number;

      - name: ü§ñ Assign issue to Copilot Coding Agent
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.COPILOT_TOKEN }}
          script: |
            const issueNumber = ${{ steps.create-issue.outputs.number }};
            const issueNodeId = '${{ steps.create-issue.outputs.node-id }}';
            
            try {
              // Step 1: Get Copilot bot ID from repository's suggested actors
              const suggestedActorsQuery = `
                query($owner: String!, $name: String!) {
                  repository(owner: $owner, name: $name) {
                    suggestedActors(capabilities: [CAN_BE_ASSIGNED], first: 100) {
                      nodes {
                        login
                        __typename
                        ... on Bot {
                          id
                        }
                      }
                    }
                  }
                }
              `;
              
              const actorsResult = await github.graphql(suggestedActorsQuery, {
                owner: context.repo.owner,
                name: context.repo.repo
              });
              
              const copilotBot = actorsResult.repository.suggestedActors.nodes.find(
                node => node.login === 'copilot-swe-agent'
              );
              
              if (!copilotBot) {
                throw new Error('Copilot Coding Agent not available in this repository. Ensure you have a GitHub Copilot subscription.');
              }
              
              console.log(`‚úÖ Found Copilot bot with ID: ${copilotBot.id}`);
              
              // Step 2: Assign the issue to Copilot using GraphQL mutation
              const assignMutation = `
                mutation($issueId: ID!, $botId: ID!) {
                  replaceActorsForAssignable(input: {assignableId: $issueId, actorIds: [$botId]}) {
                    assignable {
                      ... on Issue {
                        id
                        title
                        assignees(first: 10) {
                          nodes {
                            login
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const assignResult = await github.graphql(assignMutation, {
                issueId: issueNodeId,
                botId: copilotBot.id
              });
              
              console.log(`‚úÖ Issue #${issueNumber} successfully assigned to Copilot Coding Agent`);
              console.log('Copilot will analyze the issue and create a PR automatically.');
              
            } catch (error) {
              console.error('‚ùå Failed to assign to Copilot:', error);
              console.error('Make sure you have GitHub Copilot Pro/Business/Enterprise subscription');
              throw error;
            }

      - name: üë§ Add context comment for analysis
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.create-issue.outputs.number }};
            const failureDetails = `### ü§ñ Copilot Coding Agent Assignment
            
            This issue has been assigned to GitHub Copilot Coding Agent for automated remediation.
            
            **Failure Type:** ${{ github.event.inputs.failure-type }}  
            **Category:** ${{ github.event.inputs.failure-category }}
            
            **Expected Actions:**
            1. Analyze the failure logs and error messages above
            2. Identify the root cause of the failure
            3. Create a fix on a new branch
            4. Open a pull request with the remediation
            5. Reference this issue in the PR description
            
            The Copilot Coding Agent will automatically process this request and create a pull request with the fix.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: failureDetails
            });
            
            console.log(`‚úÖ Copilot assignment comment added to issue #${issueNumber}`);

      - name: üìä Display issue creation summary
        run: |
          echo "## üéØ Healing Issue Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Issue Number | #${{ steps.create-issue.outputs.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Issue URL | ${{ steps.create-issue.outputs.url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Failure Type | ${{ github.event.inputs.failure-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Failure Category | ${{ github.event.inputs.failure-category }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ‚úÖ Assigned to Copilot Coding Agent |" >> $GITHUB_STEP_SUMMARY
          echo "| Created At | $(date -u +'%Y-%m-%dT%H:%M:%SZ') |" >> $GITHUB_STEP_SUMMARY

  notify-team:
    needs: create-healing-issue
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üì¢ Healing workflow completion
        run: |
          echo "‚úÖ Self-healing workflow completed!"
          echo "üìã Issue #${{ needs.create-healing-issue.outputs.issue-number }} created"
          echo "üîó ${{ needs.create-healing-issue.outputs.issue-url }}"
          echo ""
          echo "The Copilot Coding Agent has been assigned and will analyze the issue to create a fix."